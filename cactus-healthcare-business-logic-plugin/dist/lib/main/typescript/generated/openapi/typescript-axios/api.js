"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Example - Supply Chain App
 * Demonstrates how a business use case can be satisfied with Cactus when multiple distinct ledgers are involved.
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Inserts the provided BambooHarvest entity to the ledger.
         * @param {InsertBambooHarvestRequest} [insertBambooHarvestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertBambooHarvestV1: async (insertBambooHarvestRequest, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-bamboo-harvest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(insertBambooHarvestRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Inserts the provided Bookshelf entity to the ledger.
         * @param {InsertBookshelfRequest} [insertBookshelfRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertBookshelfV1: async (insertBookshelfRequest, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-bookshelf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(insertBookshelfRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Inserts the provided Shipment entity to the ledger.
         * @param {InsertShipmentRequest} [insertShipmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertShipmentV1: async (insertShipmentRequest, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-shipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(insertShipmentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Lists all the BambooHarvest entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBambooHarvestV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-bamboo-harvest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Lists all the Bookshelf entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookshelfV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-bookshelf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Lists all the Shipments entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-shipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Inserts the provided BambooHarvest entity to the ledger.
         * @param {InsertBambooHarvestRequest} [insertBambooHarvestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertBambooHarvestV1(insertBambooHarvestRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertBambooHarvestV1(insertBambooHarvestRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Inserts the provided Bookshelf entity to the ledger.
         * @param {InsertBookshelfRequest} [insertBookshelfRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertBookshelfV1(insertBookshelfRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertBookshelfV1(insertBookshelfRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Inserts the provided Shipment entity to the ledger.
         * @param {InsertShipmentRequest} [insertShipmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertShipmentV1(insertShipmentRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertShipmentV1(insertShipmentRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Lists all the BambooHarvest entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBambooHarvestV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBambooHarvestV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Lists all the Bookshelf entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookshelfV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBookshelfV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Lists all the Shipments entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @summary Inserts the provided BambooHarvest entity to the ledger.
         * @param {InsertBambooHarvestRequest} [insertBambooHarvestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertBambooHarvestV1(insertBambooHarvestRequest, options) {
            return localVarFp.insertBambooHarvestV1(insertBambooHarvestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Inserts the provided Bookshelf entity to the ledger.
         * @param {InsertBookshelfRequest} [insertBookshelfRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertBookshelfV1(insertBookshelfRequest, options) {
            return localVarFp.insertBookshelfV1(insertBookshelfRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Inserts the provided Shipment entity to the ledger.
         * @param {InsertShipmentRequest} [insertShipmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertShipmentV1(insertShipmentRequest, options) {
            return localVarFp.insertShipmentV1(insertShipmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists all the BambooHarvest entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBambooHarvestV1(options) {
            return localVarFp.listBambooHarvestV1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists all the Bookshelf entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookshelfV1(options) {
            return localVarFp.listBookshelfV1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists all the Shipments entities stored on the ledger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentV1(options) {
            return localVarFp.listShipmentV1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @summary Inserts the provided BambooHarvest entity to the ledger.
     * @param {InsertBambooHarvestRequest} [insertBambooHarvestRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insertBambooHarvestV1(insertBambooHarvestRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).insertBambooHarvestV1(insertBambooHarvestRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Inserts the provided Bookshelf entity to the ledger.
     * @param {InsertBookshelfRequest} [insertBookshelfRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insertBookshelfV1(insertBookshelfRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).insertBookshelfV1(insertBookshelfRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Inserts the provided Shipment entity to the ledger.
     * @param {InsertShipmentRequest} [insertShipmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insertShipmentV1(insertShipmentRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).insertShipmentV1(insertShipmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists all the BambooHarvest entities stored on the ledger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBambooHarvestV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).listBambooHarvestV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists all the Bookshelf entities stored on the ledger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBookshelfV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).listBookshelfV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists all the Shipments entities stored on the ledger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listShipmentV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).listShipmentV1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=data:application/json;base64,